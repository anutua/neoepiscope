<!--Assumes $neoepiscope download has been run afer installation. All default dependency files present-->
<tool id="neoepiscopeWrapper2" name="neoepiscope_neoepitope " version="0.1.0" python_template_version="3.5">
    
    <requirements>
    </requirements>

    <!--Specify the command to be passed to terminal based on the user inputs for neoepiscope. Runs neoepiscope index and neoepiscope call-->
    <command><![CDATA[ 

        #if str($name3.build)=="uploadBuild": 
        neoepiscope index
        -g "${GTF}" -d dict_path 
        2>/dev/null &&
        #end if
       

        
       
        #if str($name1.hapCUT2_OUTPUT)=="No":
            #if ($name1.somatic_vcf):
            neoepiscope swap -i "${name1.somatic_vcf}" -o "${swapped_somatic}" 2>/dev/null &&
                
                #if (str($name1.name4.germline_option)=="Yes"):
                        #if ($name1.name4.germline_vcf):
                        neoepiscope swap -i "${name1.name4.germline_vcf}" -o "${swapped_germline}" 2>/dev/null &&
                        neoepiscope merge -g "${swapped_germline}" -s "${swapped_somatic}" -o "${merged_vcf}" 2>/dev/null &&
                        #end if

                #else if (str($name1.name4.germline_option)=="No"):
                cp "${swapped_somatic}" "${merged_vcf}" 2>/dev/null &&
                #end if 
                
                cd ~/HapCUT2 &&
                ./build/extractHAIRS --bam $sorted_bam --VCF $merged_vcf --out $fragment_file 2>/dev/null&&

                ./build/HAPCUT2 --fragments $fragment_file --VCF $merged_vcf --output $adjusted_Hapcut_output 2>/dev/null&&
            #end if
        
        neoepiscope call
        -c "${adjusted_Hapcut_output}" 

            #if (str($name2.affinity)=="No"): 
            --no-affinity 
            #else if (str($name2.affinity)=="Yes"):
            -p "${affinity_predictor_name}" "${affinity_predictor_version}" "${affinity_predictor_score}" -a "${alleles}"
            #end if

            #if (str($name3.build)=="hg19"):
            -b hg19
            #end if

            #if (str($name3.build)=="GRCh38"): 
            -b GRCh38
            #end if

            #if (str($kmer)!="default"):
            -k "${kmer}"
            #end if
        -o $output
        #end if
           
        #if (str($name1.hapCUT2_OUTPUT)=="Yes" ):
        neoepiscope call
        -c "${merged_hapCUT2_OUTPUT}" 
             
            #if (str($name2.affinity)=="No"): 
            --no-affinity 
            #else if (str($name2.affinity)=="Yes"):
            -p "${affinity_predictor_name}" "${affinity_predictor_version}" "${affinity_predictor_score}" -a "${alleles}"
            #end if

            #if (str($name3.build)=="hg19"):
            -b hg19
            #end if

            #if (str($name3.build)=="GRCh38"): 
            -b GRCh38
            #end if

            #if (str($kmer)!="default"):
            -k "${kmer}"
            #end if
        -o $output
        #end if

        2>/dev/null
        
         
    ]]>

    </command>
    <inputs>
        <!--genome build options-->
        <conditional name="name3">
            <param name="build" type="select" label="Select your preferred genome build." >
                <option value="hg19">hg19</option>
                <option value="GRCh38">GRCh38</option>
                <option value="uploadBuild">Upload genome build</option>
            </param>
            <when value="uploadBuild">
                <param name="GTF" type="data" label="Upload a gene annotation (GTF) file consistent with the selected genome build." />
            </when>
        </conditional>

        <!--vcf processing inputs-->
        <conditional name="name1">
            <param name="hapCUT2_OUTPUT" type="boolean" truevalue="Yes" falsevalue="No" label="Do you already have HapCUT2-processed output from your somatic and/or germline VCF file(s)? ">
            </param>
            <when value="No">
                <param type="data" name ="somatic_vcf" format="vcf" label="Upload a somatic VCF file."/>
                <conditional name="name4">
                    <param name="germline_option" type="boolean" truevalue="Yes" falsevalue="No" label="Would you like to take into account germline variation in this neoepitope prediction pipeline? Selecting Yes requires as additional input a germline VCF file" />
                        <when value="Yes">
                            <param name="germline_vcf" type="data" format="vcf" label="Upload a germline VCF file." />
                        </when> 
                </conditional>
                <param type="data" name ="sorted_bam" format="bam" label="Upload a sorted bam file."/>
            </when>
            <when value="Yes">
                <param name="merged_hapCUT2_OUTPUT" type="data" label="Upload HapCUT2 output file." />
            </when>
        </conditional>

        <conditional name="name2">
            <param name="affinity" type="boolean" truevalue="Yes" falsevalue="No" label="Should binding affinity be calculated?" />
            <when value="Yes">
                <param name="affinity_predictor_name" type="select" label="Select your software" />
                <param name="affinity_predictor_version" type="select" label="Select its version number" />
                <param name="affinity_predictor_score" type="select" label="Select its score" />
                <param name="alleles" type="data" format="csv" label="Binding affinity predictors require a list of alleles. Please upload your allele file in csv format" />        
            </when>
        </conditional>
        

        <param name="kmer" type="select" label="Select a preferred kmer size from the drop down list." >
                <option value="default">default</option>
                <option value="80">80</option>
                <option value="100">100</option>
        </param>

    </inputs>
    <outputs>

        <data name="dict_path" label="pickled dictionaries">
            <filter>name3['build']=="uploadBuild"</filter>
        </data>
        <data format="vcf" name="swapped_somatic" label="swapped somatic">
            <filter> name1['name4['germline_option']'] is False </filter>
        </data>
         <data format="vcf" name="swapped_germline" label="swapped germline">
            <filter> name1['name4['germline_option']'] is True </filter>
        </data>
        <data format="vcf" name="merged_vcf" label="Merged vcf">
            <filter> name1['hapCUT2_OUTPUT'] is False </filter>
        </data>
        <data format="vcf" name="fragment_file" label="fragment file">
            <filter> name1['hapCUT2_OUTPUT'] is False </filter>
        </data>
        <data format="vcf" name="adjusted_Hapcut_output" label="Adjusted Hapcut2 Output">
            <filter> name1['hapCUT2_OUTPUT'] is False </filter>
        </data>

        <data name="output" format="tsv" label="Neoepitopes found">
        </data>  

    </outputs>

    <tests>
        <test>
            <conditional name="name1">
                <param name="hapCUT2_OUTPUT" value="No"/>
                <conditional name="name4">
                    <param name="germline_option" value="No"/>
                </conditional>
            </conditional> 
            <output name="swapped_somatic"/>
            <output name="merged_vcf"/>
            <output name="fragment_file"/>
            <output name="adjusted_Hapcut_output"/>
        </test>
        <test>
            <conditional name="name1">
                <param name="hapCUT2_OUTPUT" value="No"/>
                <conditional name="name4">
                    <param name="germline_option" value="Yes"/>
                </conditional>
            </conditional> 
            <output name="swapped_somatic"/>
            <output name="swapped_germline"/>
            <output name="merged_vcf"/>
            <output name="fragment_file"/>
            <output name="adjusted_Hapcut_output"/>
        </test>
        <test>
            <conditional name="name3">
                <param name="build" value="uploadBuild"/>
            </conditional> 
            <output name="dict_path"/>
        </test>
    </tests>

    <help><![CDATA[
       Calls neoepitopes 
    ]]></help>

</tool>

